import UIKit
import Parse

class TableViewController: UITableViewController {

    var usernames = [""]
    var userIds = [""]
    var isFollowing = ["":false]
    var refresher:UIRefreshControl!
    
    func refresh() {
        print("Refreshed")
        var query = PFUser.query()
        query?.findObjectsInBackgroundWithBlock({ (objects, error) in
            if let users = objects {
                
                self.usernames.removeAll(keepCapacity: true)         //to remove empty object in array
                self.userIds.removeAll(keepCapacity: true)
                self.isFollowing.removeAll(keepCapacity: true)
                
                for object in users {
                    
                    if let user = object as? PFUser {
                        
                        if user.objectId != PFUser.currentUser()?.objectId {           //to remove current user from friends list
                            
                            self.usernames.append(user.username!)
                            self.userIds.append(user.objectId!)
                            
                            var query = PFQuery(className: "Followers")
                            query.whereKey("Following", equalTo: user.objectId!)
                            query.whereKey("Follower", equalTo: (PFUser.currentUser()?.objectId)!)
                            query.findObjectsInBackgroundWithBlock({ (objects, error) in
                                if let object = objects {
                                    if objects?.count > 0 {
                                        self.isFollowing[user.objectId!] = true
                                        
                                    }else {
                                        
                                        self.isFollowing[user.objectId!] = false
                                    }
                                }
                                
                                if self.isFollowing.count == self.usernames.count {
                                    self.tableView.reloadData()
                                     self.refresher.endRefreshing()
                                }
                            })
                            
                            
                        }
                    }
                    
                }

            
            }
        }) // the whole code above after print refreshed is copied from below
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        refresher = UIRefreshControl()
        refresher.attributedTitle = NSAttributedString(string: "Swipe Down to Refresh")
        refresher.addTarget(self, action: "refresh", forControlEvents: UIControlEvents.ValueChanged)
        self.tableView.addSubview(refresher)
        refresh()
        
        

        var query = PFUser.query()
        query?.findObjectsInBackgroundWithBlock({ (objects, error) in
            if let users = objects {
                
                self.usernames.removeAll(keepCapacity: true)         //to remove empty object in array
                self.userIds.removeAll(keepCapacity: true)
                self.isFollowing.removeAll(keepCapacity: true)
                
                for object in users {
                    
                    if let user = object as? PFUser {
                        
                        if user.objectId != PFUser.currentUser()?.objectId {           //to remove current user from friends list
                        
                        self.usernames.append(user.username!)
                        self.userIds.append(user.objectId!)
                        
                        var query = PFQuery(className: "Followers")
                           query.whereKey("Following", equalTo: user.objectId!)
                            query.whereKey("Follower", equalTo: (PFUser.currentUser()?.objectId)!)
                        query.findObjectsInBackgroundWithBlock({ (objects, error) in
                            if let object = objects {
                                if objects?.count > 0 {
                                self.isFollowing[user.objectId!] = true
                                
                            }else {
                                
                                self.isFollowing[user.objectId!] = false
                            }
                            }
                            
                            if self.isFollowing.count == self.usernames.count {
                            self.tableView.reloadData()
                            }
                        })
                        
                        
                        }
                    }
                    
                }
                
            }
            
           // print(self.usernames)
           // print(self.userIds)
           //code is moved to above self.tableView.reloadData()
        })
        
        
        
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return usernames.count
    }

    
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("cell", forIndexPath: indexPath)

        cell.textLabel?.text = usernames[indexPath.row]
        let followedObjectId = userIds[indexPath.row]
        if isFollowing[followedObjectId] == true {
            cell.accessoryType = UITableViewCellAccessoryType.Checkmark
            
        }

        return cell
    }
    
    
    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        print(indexPath.row)
        
        var cell:UITableViewCell = tableView.cellForRowAtIndexPath(indexPath)!
        let followedObjectId = userIds[indexPath.row]
        
        if isFollowing[followedObjectId] == false {
        
            isFollowing[followedObjectId]=true
            cell.accessoryType = UITableViewCellAccessoryType.Checkmark
        
        var following = PFObject(className: "Followers")
        following["Following"] = userIds[indexPath.row]
        following["Follower"] = PFUser.currentUser()?.objectId
        following.saveInBackground()
        } else {
            isFollowing[followedObjectId] = false
            cell.accessoryType = UITableViewCellAccessoryType.None
            var query = PFQuery(className: "Followers")
            query.whereKey("Following", equalTo: userIds[indexPath.row])
            query.whereKey("Follower", equalTo: (PFUser.currentUser()?.objectId)!)
            query.findObjectsInBackgroundWithBlock({ (objects, error) in
                if let object = objects {
                    for object in objects! {
                        object.deleteInBackground()
                    }
                    
                    }
                
                
            })
            
            
        }
    
    
    
    }
